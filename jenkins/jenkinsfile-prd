node {
    stage('check-out') {
        // Get some code from a GitHub repository
        slackSend (channel: "jenkins", color: "good",  message: "Build Started - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
        git url: 'https://github.com/woowacourse-teams/2022-mo-rak.git',
            branch: 'main'
    }

    stage('build') {
        dir ('./backend') {
            try {
                sh './gradlew clean build'
                slackSend (channel: "jenkins", color: "good",  message: "Build Succeeded - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
            } catch(e) {
                slackSend (channel: "jenkins", color: "warning",  message: "Build Failed - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
                throw e
            }
        }
    }

    stage('swap') {
            try {
                OUTPUT = sh ( script: '''#!/bin/bash
                IP_LIST=(${PRD_WAS_IP_LIST})

                SIZE=${#IP_LIST[@]}
                PORT_A=8080
                PORT_B=8081

                PREVIOUS_PORT_LIST=()
                NEXT_PORT_LIST=()

                for IP in ${IP_LIST[@]}
                do
                    if curl -s -I -X OPTIONS "http://${IP}:${PORT_A}" > /dev/null; then
                        PREVIOUS_PORT_LIST+=("${PORT_A}")
                        NEXT_PORT_LIST+=("${PORT_B}")
                    else
                        PREVIOUS_PORT_LIST+=("${PORT_B}")
                        NEXT_PORT_LIST+=("${PORT_A}")
                    fi
                done

                for index in $(seq ${SIZE})
                do
                    PREVIOUS=${PREVIOUS_PORT_LIST[index-1]}
                    NEXT=${NEXT_PORT_LIST[index-1]}
                    IP=${IP_LIST[index-1]}

                    ssh -i /var/lib/jenkins/key-morak.pem ubuntu@"${IP}" "sh /home/ubuntu/deploy/start_service.sh ${NEXT} 1>/dev/null 2>/dev/null"
                done


                for retry in $(seq 10)
                do
                    COUNT=0
                    for index in $(seq ${SIZE})
                    do
                        IP=${IP_LIST[index-1]}
                        NEXT=${NEXT_PORT_LIST[index-1]}
                        if curl -s -I -X OPTIONS "http://${IP}:${PORT_A}" > /dev/null; then
                            COUNT=$(($COUNT + 1))
                        fi
                    done

                    if [ $COUNT -eq $SIZE ]
                    then
                        break
                    fi

                    if [ $retry -eq 10 ]
                    then
                        exit 1
                    fi

                    sleep 5
                done

                for index in $(seq ${SIZE})
                do
                    IP=${IP_LIST[index-1]}
                    PREVIOUS=${PREVIOUS_PORT_LIST[index-1]}
                    ssh -i /var/lib/jenkins/key-morak.pem ubuntu@"${IP}" "sh /home/ubuntu/deploy/kill.sh ${PREVIOUS} 1>/dev/null 2>/dev/null"
                done


                for index in $(seq ${SIZE})
                do
                    echo "${IP_LIST[index-1]}:${NEXT_PORT_LIST[index-1]}"
                done
                ''',
                returnStdout: true
                ).trim()
                OUTPUT = OUTPUT.split("\n")

                echo "result is : ${OUTPUT}"
                slackSend (channel: "jenkins", color: "good", message: "Deploy Succeeded - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
            } catch(e) {
                slackSend (channel: "jenkins", color: "warning", message: "Deploy Failed - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
                throw e
            }

    }

    stage('route') {
            try {
                echo "URL_A=${OUTPUT[0]}"
                echo "URL_B=${OUTPUT[1]}"

                sh 'ssh -i /var/lib/jenkins/key-morak.pem ubuntu@${WS_IP} "bash /home/ubuntu/route.sh ' + OUTPUT[0] + ' ' + OUTPUT[1] + '"'
                slackSend (channel: "jenkins", color: "good",  message: "Route Succeeded - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
            } catch(e) {
                slackSend (channel: "jenkins", color: "warning",  message: "Route Failed - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
                throw e
            }
    }
}

