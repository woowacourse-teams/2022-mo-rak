plugins {
    id 'org.springframework.boot' version '2.6.6'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id 'java'
    id 'jacoco'
}

group = 'com.morak'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    asciidoctorExtensions
}

jacoco {
    // JaCoCo 버전
    toolVersion = '0.8.7'

//  테스트결과 리포트를 저장할 경로 변경
//  default는 "$/jacoco"
//  reportsDir = file("$buildDir/customJacocoReportDir")
}

repositories {
    mavenCentral()
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'com.github.maricn:logback-slack-appender:1.6.1'

    compileOnly 'org.projectlombok:lombok'

    runtimeOnly 'mysql:mysql-connector-java'
    runtimeOnly 'com.h2database:h2'

    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

    asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor'

    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // 랜덤 코드 생성
    implementation 'org.apache.commons:commons-lang3:3.12.0'

    // 테스트
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.rest-assured:rest-assured:4.4.0'

    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
}

task testCoverage(type: Test) {
    group 'verification'
    description 'Runs the unit tests with coverage'

    dependsOn(':test',
            ':jacocoTestReport',
            ':jacocoTestCoverageVerification')

    tasks['jacocoTestReport'].mustRunAfter(tasks['test'])
    tasks['jacocoTestCoverageVerification'].mustRunAfter(tasks['jacocoTestReport'])
}

tasks.named('test') {
    outputs.dir snippetsDir
    useJUnitPlatform()
//    finalizedBy testCoverage
//    finalizedBy bootJar
}

tasks.named('asciidoctor') {
    configurations 'asciidoctorExtensions'
    sources{
        include("**/index.adoc","**/common/*.adoc")
    }
    baseDirFollowsSourceFile()
    inputs.dir snippetsDir

    dependsOn test
}

asciidoctor.doFirst {
    delete file('src/main/resources/static/docs')
}

task createDocument(type: Copy) {
    dependsOn asciidoctor

    from file("build/docs/asciidoc")
    into file("src/main/resources/static")
}

bootJar {
    dependsOn createDocument
}


tasks.named('jacocoTestReport') {
    reports {
        // 원하는 리포트를 켜고 끌 수 있습니다.
        html.enabled true
        xml.enabled true
        csv.enabled false

//  각 리포트 타입 마다 리포트 저장 경로를 설정할 수 있습니다.
//  html.destination file("$buildDir/jacocoHtml")
//  xml.destination file("$buildDir/jacoco.xml")
    }
}

tasks.named('jacocoTestCoverageVerification') {
    // element 종류(커버리지를 체크할 기준)
    // BUNDLE : 패키지 번들(프로젝트 모든 파일을 합친 것. default)
    // CLASS : 클래스
    // GROUP : 논리적 번들 그룹
    // METHOD : 메서드
    // PACKAGE : 패키지
    //SOURCEFILE : 소스 파일

    // counter 종류(커버리지 측정의 최소 단위)
    // BRANCH : 조건문 등의 분기 수
    // CLASS : 클래스 수, 내부 메서드가 한 번이라도 실행된다면 실행된 것으로 간주한다.
    // INSTRUCTION : Java 바이트코드 명령 수 (default)
    // METHOD : 메서드 수, 메서드가 한 번이라도 실행된다면 실행된 것으로 간주한다.
    // LINE : 빈 줄을 제외한 실제 코드의 라인 수, 라인이 한 번이라도 실행되면 실행된 것으로 간주한다.

    // value 종류
    // COVEREDCOUNT : 커버된 개수
    // COVEREDRATIO : 커버된 비율, 0부터 1사이의 숫자로 1이 100%이다. (default)
    // MISSEDCOUNT : 커버되지 않은 개수
    // MISSEDRATIO : 커버되지 않은 비율, 0부터 1사이의 숫자로 1이 100%이다.
    // TOTALCOUNT : 전체 개수
    violationRules {
        rule {
            element = 'CLASS'

            // 분기 커버리지를 최소한 90% 만족시켜야 한다.
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.40
            }

            // 라인 커버리지를 최소한 80% 만족시켜야 합니다.
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.70
            }

            // 메서드 커버리지를 최소한 70% 만족시켜야 합니다.
            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = 0.40
            }

            excludes = [
                    '**.*Exception*',
                    '**.LogFormatter*',
                    '**.*OAuthClient*',
                    '**.*BaseEntity*',
                    '**.*InputStream*',
                    '**.*ControllerAdvice*',
                    '**.*MorakBackApplication*',
                    '**.*Response*',
                    '**.*OAuthClient*',
                    '**.*Interceptor*'
            ]
        }

        rule {
            element = 'METHOD'

            // 메서드의 라인 수는 최대 200줄입니다.
            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                maximum = 200
            }
        }
    }
}

task createDocument(type: Copy) {
    dependsOn asciidoctor

    from file("build/docs/asciidoc")
    into file("src/main/resources/static/docs")
}

bootJar {
    dependsOn createDocument
}
